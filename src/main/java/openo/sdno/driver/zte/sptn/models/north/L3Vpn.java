/**
 * L3VpnService Sbi Adapter Interface
 * Orchestrator SDN-O SBI Reference V1.0-L3VPN
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package openo.sdno.driver.zte.sptn.models.north;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * the model of a L3VPN (all related information).
 */
@ApiModel(description = "the model of a L3VPN (all related information).")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen",
                            date = "2016-08-12T11:26:39.981+08:00")
public class L3Vpn {

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("tenantId")
  private String tenantId = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("topology")
  private String topology = null;

  @SerializedName("adminStatus")
  private String adminStatus = null;

  @SerializedName("operStatus")
  private String operStatus = null;

  @SerializedName("tunnelService")
  private TunnelService tunnelService = null;

  @SerializedName("mtu")
  private Integer mtu = null;

  @SerializedName("frr")
  private Boolean frr = null;

  @SerializedName("acs")
  private L3Acs acs = null;

  @SerializedName("loopbackifs")
  private L3LoopbackIfs loopbackifs = null;

  @SerializedName("topologyService")
  private TopologyService topologyService = null;

  @SerializedName("protectGroup")
  private ProtectGroup protectGroup = null;

  @SerializedName("diffServ")
  private DiffServ diffServ = null;

  public L3Vpn id(String id) {
    this.id = id;
    return this;
  }

  /**
   * This is a UUID of the vpn-instance, which is allocated by the orchestrator.
   *
   * @return id
   */
  @ApiModelProperty(example = "null", required = true,
                    value = "This is a UUID of the vpn-instance, which is allocated by the orchestrator.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public L3Vpn name(String name) {
    this.name = name;
    return this;
  }

  /**
   * This is the name of the vpn-instance, be created by the application, which is just used to
   * identify the different vpn instances created by the application, and the name on forwarding
   * device can be created differently by controller.
   *
   * @return name
   */
  @ApiModelProperty(example = "null", required = true,
                    value = "This is the name of the vpn-instance, be created by the application, which is just used to identify the different vpn instances created by the application, and the name on forwarding device can be created differently by controller.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public L3Vpn tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Tenant ID.
   *
   * @return tenantId
   */
  @ApiModelProperty(example = "null", value = "Tenant ID.")
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }

  public L3Vpn description(String description) {
    this.description = description;
    return this;
  }

  /**
   * This is the description of the vpn-instance.
   *
   * @return description
   */
  @ApiModelProperty(example = "null", value = "This is the description of the vpn-instance.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public L3Vpn topology(String topology) {
    this.topology = topology;
    return this;
  }

  /**
   * This identify the connection mode of vpns, including none, hub-spoke and full-mesh.
   *
   * @return topology
   */
  @ApiModelProperty(example = "null",
                    value = "This identify the connection mode of vpns, including none, hub-spoke and full-mesh.")
  public String getTopology() {
    return topology;
  }

  public void setTopology(String topology) {
    this.topology = topology;
  }

  public L3Vpn adminStatus(String adminStatus) {
    this.adminStatus = adminStatus;
    return this;
  }

  /**
   * L3VPN Connection management status(active, inactive). Active - activate the L3VPN Connection.
   * Inactive - inactivate the L3VPN Connection. adminUp(0, \"adminUp\"), adminDown(1,
   * \"adminDown\");
   *
   * @return adminStatus
   */
  @ApiModelProperty(example = "null", required = true,
                    value = "L3VPN Connection management status(active, inactive). Active - activate the L3VPN Connection. Inactive - inactivate the L3VPN Connection. adminUp(0, \"adminUp\"), adminDown(1, \"adminDown\");")
  public String getAdminStatus() {
    return adminStatus;
  }

  public void setAdminStatus(String adminStatus) {
    this.adminStatus = adminStatus;
  }

  public L3Vpn operStatus(String operStatus) {
    this.operStatus = operStatus;
    return this;
  }

  /**
   * The running status of connection in controller, the adapter need fill this parameter
   * (up,down,partially down). operateUp(0, \"operateUp\"), operateDown(1, \"operateDown\");
   *
   * @return operStatus
   */
  @ApiModelProperty(example = "null",
                    value = "The running status of connection in controller, the adapter need fill this parameter (up,down,partially down). operateUp(0, \"operateUp\"), operateDown(1, \"operateDown\");")
  public String getOperStatus() {
    return operStatus;
  }

  public void setOperStatus(String operStatus) {
    this.operStatus = operStatus;
  }

  public L3Vpn tunnelService(TunnelService tunnelService) {
    this.tunnelService = tunnelService;
    return this;
  }

  /**
   * Get tunnelService
   *
   * @return tunnelService
   */
  @ApiModelProperty(example = "null", required = true, value = "")
  public TunnelService getTunnelService() {
    return tunnelService;
  }

  public void setTunnelService(TunnelService tunnelService) {
    this.tunnelService = tunnelService;
  }

  public L3Vpn mtu(Integer mtu) {
    this.mtu = mtu;
    return this;
  }

  /**
   * MTU minimum: 46.0 maximum: 9600.0
   *
   * @return mtu
   */
  @ApiModelProperty(example = "null", value = "MTU")
  public Integer getMtu() {
    return mtu;
  }

  public void setMtu(Integer mtu) {
    this.mtu = mtu;
  }

  public L3Vpn frr(Boolean frr) {
    this.frr = frr;
    return this;
  }

  /**
   * Whether the vpn should be in vpn frr protection (true, false).
   *
   * @return frr
   */
  @ApiModelProperty(example = "null",
                    value = "Whether the vpn should be in vpn frr protection (true, false).")
  public Boolean getFrr() {
    return frr;
  }

  public void setFrr(Boolean frr) {
    this.frr = frr;
  }

  public L3Vpn acs(L3Acs acs) {
    this.acs = acs;
    return this;
  }

  /**
   * Get acs
   *
   * @return acs
   */
  @ApiModelProperty(example = "null", required = true, value = "")
  public L3Acs getAcs() {
    return acs;
  }

  public void setAcs(L3Acs acs) {
    this.acs = acs;
  }

  public L3Vpn loopbackifs(L3LoopbackIfs loopbackifs) {
    this.loopbackifs = loopbackifs;
    return this;
  }

  /**
   * Get loopbackifs
   *
   * @return loopbackifs
   */
  @ApiModelProperty(example = "null", value = "")
  public L3LoopbackIfs getLoopbackifs() {
    return loopbackifs;
  }

  public void setLoopbackifs(L3LoopbackIfs loopbackifs) {
    this.loopbackifs = loopbackifs;
  }

  public L3Vpn topologyService(TopologyService topologyService) {
    this.topologyService = topologyService;
    return this;
  }

  /**
   * Get topologyService
   *
   * @return topologyService
   */
  @ApiModelProperty(example = "null", value = "")
  public TopologyService getTopologyService() {
    return topologyService;
  }

  public void setTopologyService(TopologyService topologyService) {
    this.topologyService = topologyService;
  }

  public L3Vpn protectGroup(ProtectGroup protectGroup) {
    this.protectGroup = protectGroup;
    return this;
  }

  /**
   * Get protectGroup
   *
   * @return protectGroup
   */
  @ApiModelProperty(example = "null", value = "")
  public ProtectGroup getProtectGroup() {
    return protectGroup;
  }

  public void setProtectGroup(ProtectGroup protectGroup) {
    this.protectGroup = protectGroup;
  }

  public L3Vpn diffServ(DiffServ diffServ) {
    this.diffServ = diffServ;
    return this;
  }

  /**
   * Get diffServ
   *
   * @return diffServ
   */
  @ApiModelProperty(example = "null", value = "")
  public DiffServ getDiffServ() {
    return diffServ;
  }

  public void setDiffServ(DiffServ diffServ) {
    this.diffServ = diffServ;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    L3Vpn l3Vpn = (L3Vpn) o;
    return Objects.equals(this.id, l3Vpn.id) &&
           Objects.equals(this.name, l3Vpn.name) &&
           Objects.equals(this.tenantId, l3Vpn.tenantId) &&
           Objects.equals(this.description, l3Vpn.description) &&
           Objects.equals(this.topology, l3Vpn.topology) &&
           Objects.equals(this.adminStatus, l3Vpn.adminStatus) &&
           Objects.equals(this.operStatus, l3Vpn.operStatus) &&
           Objects.equals(this.tunnelService, l3Vpn.tunnelService) &&
           Objects.equals(this.mtu, l3Vpn.mtu) &&
           Objects.equals(this.frr, l3Vpn.frr) &&
           Objects.equals(this.acs, l3Vpn.acs) &&
           Objects.equals(this.loopbackifs, l3Vpn.loopbackifs) &&
           Objects.equals(this.topologyService, l3Vpn.topologyService) &&
           Objects.equals(this.protectGroup, l3Vpn.protectGroup) &&
           Objects.equals(this.diffServ, l3Vpn.diffServ);
  }

  @Override
  public int hashCode() {
    return Objects
        .hash(id, name, tenantId, description, topology, adminStatus, operStatus, tunnelService,
              mtu, frr, acs, loopbackifs, topologyService, protectGroup, diffServ);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class L3Vpn {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    topology: ").append(toIndentedString(topology)).append("\n");
    sb.append("    adminStatus: ").append(toIndentedString(adminStatus)).append("\n");
    sb.append("    operStatus: ").append(toIndentedString(operStatus)).append("\n");
    sb.append("    tunnelService: ").append(toIndentedString(tunnelService)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("    frr: ").append(toIndentedString(frr)).append("\n");
    sb.append("    acs: ").append(toIndentedString(acs)).append("\n");
    sb.append("    loopbackifs: ").append(toIndentedString(loopbackifs)).append("\n");
    sb.append("    topologyService: ").append(toIndentedString(topologyService)).append("\n");
    sb.append("    protectGroup: ").append(toIndentedString(protectGroup)).append("\n");
    sb.append("    diffServ: ").append(toIndentedString(diffServ)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first
   * line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

