/**
 * SDN-O SPTN Controller Driver SBI Interface
 * SDN-O SPTN Controller Driver SBI Interface
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package openo.sdno.driver.zte.sptn.models.south;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * Node on the route
 */
@ApiModel(description = "Node on the route")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen",
                            date = "2016-08-12T10:40:00.335+08:00")
public class XC {

  @SerializedName("ne-id")
  private String neId = null;

  @SerializedName("ingress-ltp-id")
  private String ingressLtpId = null;

  @SerializedName("forward-in-label")
  private Integer forwardInLabel = null;

  @SerializedName("backward-out-label")
  private Integer backwardOutLabel = null;

  @SerializedName("backward-peer-id")
  private String backwardPeerId = null;

  @SerializedName("egress-ltp-id")
  private String egressLtpId = null;

  @SerializedName("forward-out-label")
  private Integer forwardOutLabel = null;

  @SerializedName("backward-in-label")
  private Integer backwardInLabel = null;

  @SerializedName("forward-peer-id")
  private String forwardPeerId = null;

  public XC neId(String neId) {
    this.neId = neId;
    return this;
  }

  /**
   * UUID of NE
   *
   * @return neId
   */
  @ApiModelProperty(example = "null", required = true, value = "UUID of NE")
  public String getNeId() {
    return neId;
  }

  public void setNeId(String neId) {
    this.neId = neId;
  }

  public XC ingressLtpId(String ingressLtpId) {
    this.ingressLtpId = ingressLtpId;
    return this;
  }

  /**
   * UUID of XC's ingress port. For LSP, it is PTP or FTP; For destination node of PW, it is empty
   *
   * @return ingressLtpId
   */
  @ApiModelProperty(example = "null",
                    value = "UUID of XC's ingress port. For LSP, it is PTP or FTP; For destination node of PW, it is empty")
  public String getIngressLtpId() {
    return ingressLtpId;
  }

  public void setIngressLtpId(String ingressLtpId) {
    this.ingressLtpId = ingressLtpId;
  }

  public XC forwardInLabel(Integer forwardInLabel) {
    this.forwardInLabel = forwardInLabel;
    return this;
  }

  /**
   * Inlabel of ingress port, for driver it is 0, controller will fill this field, range from 16 to
   * 1048575
   *
   * @return forwardInLabel
   */
  @ApiModelProperty(example = "null",
                    value = "Inlabel of ingress port, for driver it is 0, controller will fill this field, range from 16 to 1048575")
  public Integer getForwardInLabel() {
    return forwardInLabel;
  }

  public void setForwardInLabel(Integer forwardInLabel) {
    this.forwardInLabel = forwardInLabel;
  }

  public XC backwardOutLabel(Integer backwardOutLabel) {
    this.backwardOutLabel = backwardOutLabel;
    return this;
  }

  /**
   * Outlabel of ingress port, for driver it is 0, controller will fill this field, range from 16 to
   * 1048575
   *
   * @return backwardOutLabel
   */
  @ApiModelProperty(example = "null",
                    value = "Outlabel of ingress port, for driver it is 0, controller will fill this field, range from 16 to 1048575")
  public Integer getBackwardOutLabel() {
    return backwardOutLabel;
  }

  public void setBackwardOutLabel(Integer backwardOutLabel) {
    this.backwardOutLabel = backwardOutLabel;
  }

  public XC backwardPeerId(String backwardPeerId) {
    this.backwardPeerId = backwardPeerId;
    return this;
  }

  /**
   * For LSP, it is the IP address of ingress port's peer port; For PW, it is VC ID of ingress
   * port's peer port
   *
   * @return backwardPeerId
   */
  @ApiModelProperty(example = "null",
                    value = "For LSP, it is the IP address of ingress port's peer port; For PW, it is VC ID of ingress port's peer port")
  public String getBackwardPeerId() {
    return backwardPeerId;
  }

  public void setBackwardPeerId(String backwardPeerId) {
    this.backwardPeerId = backwardPeerId;
  }

  public XC egressLtpId(String egressLtpId) {
    this.egressLtpId = egressLtpId;
    return this;
  }

  /**
   * UUID of XC's egress port. For LSP, it is PTP or FTP; For source node of PW, it is empty
   *
   * @return egressLtpId
   */
  @ApiModelProperty(example = "null",
                    value = "UUID of XC's egress port. For LSP, it is PTP or FTP; For source node of PW, it is empty")
  public String getEgressLtpId() {
    return egressLtpId;
  }

  public void setEgressLtpId(String egressLtpId) {
    this.egressLtpId = egressLtpId;
  }

  public XC forwardOutLabel(Integer forwardOutLabel) {
    this.forwardOutLabel = forwardOutLabel;
    return this;
  }

  /**
   * Outlabel of egress port, for driver it is 0, controller will fill this field, range from 16 to
   * 1048575
   *
   * @return forwardOutLabel
   */
  @ApiModelProperty(example = "null",
                    value = "Outlabel of egress port, for driver it is 0, controller will fill this field, range from 16 to 1048575")
  public Integer getForwardOutLabel() {
    return forwardOutLabel;
  }

  public void setForwardOutLabel(Integer forwardOutLabel) {
    this.forwardOutLabel = forwardOutLabel;
  }

  public XC backwardInLabel(Integer backwardInLabel) {
    this.backwardInLabel = backwardInLabel;
    return this;
  }

  /**
   * Inlabel of egress port, for driver it is 0, controller will fill this field, range from 16 to
   * 1048575
   *
   * @return backwardInLabel
   */
  @ApiModelProperty(example = "null",
                    value = "Inlabel of egress port, for driver it is 0, controller will fill this field, range from 16 to 1048575")
  public Integer getBackwardInLabel() {
    return backwardInLabel;
  }

  public void setBackwardInLabel(Integer backwardInLabel) {
    this.backwardInLabel = backwardInLabel;
  }

  public XC forwardPeerId(String forwardPeerId) {
    this.forwardPeerId = forwardPeerId;
    return this;
  }

  /**
   * For LSP, it is the IP address of egress port's peer port; For PW, it is VC ID of egress port's
   * peer port
   *
   * @return forwardPeerId
   */
  @ApiModelProperty(example = "null",
                    value = "For LSP, it is the IP address of egress port's peer port; For PW, it is VC ID of egress port's peer port")
  public String getForwardPeerId() {
    return forwardPeerId;
  }

  public void setForwardPeerId(String forwardPeerId) {
    this.forwardPeerId = forwardPeerId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XC XC = (XC) o;
    return Objects.equals(this.neId, XC.neId) &&
           Objects.equals(this.ingressLtpId, XC.ingressLtpId) &&
           Objects.equals(this.forwardInLabel, XC.forwardInLabel) &&
           Objects.equals(this.backwardOutLabel, XC.backwardOutLabel) &&
           Objects.equals(this.backwardPeerId, XC.backwardPeerId) &&
           Objects.equals(this.egressLtpId, XC.egressLtpId) &&
           Objects.equals(this.forwardOutLabel, XC.forwardOutLabel) &&
           Objects.equals(this.backwardInLabel, XC.backwardInLabel) &&
           Objects.equals(this.forwardPeerId, XC.forwardPeerId);
  }

  @Override
  public int hashCode() {
    return Objects
        .hash(neId, ingressLtpId, forwardInLabel, backwardOutLabel, backwardPeerId, egressLtpId,
              forwardOutLabel, backwardInLabel, forwardPeerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XC {\n");

    sb.append("    neId: ").append(toIndentedString(neId)).append("\n");
    sb.append("    ingressLtpId: ").append(toIndentedString(ingressLtpId)).append("\n");
    sb.append("    forwardInLabel: ").append(toIndentedString(forwardInLabel)).append("\n");
    sb.append("    backwardOutLabel: ").append(toIndentedString(backwardOutLabel)).append("\n");
    sb.append("    backwardPeerId: ").append(toIndentedString(backwardPeerId)).append("\n");
    sb.append("    egressLtpId: ").append(toIndentedString(egressLtpId)).append("\n");
    sb.append("    forwardOutLabel: ").append(toIndentedString(forwardOutLabel)).append("\n");
    sb.append("    backwardInLabel: ").append(toIndentedString(backwardInLabel)).append("\n");
    sb.append("    forwardPeerId: ").append(toIndentedString(forwardPeerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first
   * line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

