/**
 * L3VpnService Sbi Adapter Interface
 * Orchestrator SDN-O SBI Reference V1.0-L3VPN
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package openo.sdno.driver.zte.sptn.models.north;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * Tunnel policy of Mple-te
 */
@ApiModel(description = "Tunnel policy of Mple-te")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen",
                            date = "2016-08-12T11:26:39.981+08:00")
public class MplsTePolicy {

  @SerializedName("signalType")
  private String signalType = null;

  @SerializedName("manageProtocol")
  private String manageProtocol = null;

  @SerializedName("sharing")
  private Boolean sharing = null;

  @SerializedName("besteffort")
  private Boolean besteffort = null;

  @SerializedName("bandwidth")
  private Long bandwidth = null;

  @SerializedName("coRoute")
  private Boolean coRoute = null;

  @SerializedName("bfdEnable")
  private Boolean bfdEnable = null;

  @SerializedName("pathConstraint")
  private PathConstraint pathConstraint = null;

  @SerializedName("pathProtectPolicy")
  private PathProtectPolicy pathProtectPolicy = null;

  public MplsTePolicy signalType(String signalType) {
    this.signalType = signalType;
    return this;
  }

  /**
   * Tunnel type of Manual Select(rsvp-te, sr-te, static-lsp)
   *
   * @return signalType
   */
  @ApiModelProperty(example = "null", required = true,
                    value = "Tunnel type of Manual Select(rsvp-te, sr-te, static-lsp)")
  public String getSignalType() {
    return signalType;
  }

  public void setSignalType(String signalType) {
    this.signalType = signalType;
  }

  public MplsTePolicy manageProtocol(String manageProtocol) {
    this.manageProtocol = manageProtocol;
    return this;
  }

  /**
   * Manage protocol(netconf, pcep)
   *
   * @return manageProtocol
   */
  @ApiModelProperty(example = "null", value = "Manage protocol(netconf, pcep)")
  public String getManageProtocol() {
    return manageProtocol;
  }

  public void setManageProtocol(String manageProtocol) {
    this.manageProtocol = manageProtocol;
  }

  public MplsTePolicy sharing(Boolean sharing) {
    this.sharing = sharing;
    return this;
  }

  /**
   * Whether is shared (true, false)
   *
   * @return sharing
   */
  @ApiModelProperty(example = "null", required = true, value = "Whether is shared (true, false)")
  public Boolean getSharing() {
    return sharing;
  }

  public void setSharing(Boolean sharing) {
    this.sharing = sharing;
  }

  public MplsTePolicy besteffort(Boolean besteffort) {
    this.besteffort = besteffort;
    return this;
  }

  /**
   * Whether is best effort (true, false)
   *
   * @return besteffort
   */
  @ApiModelProperty(example = "null", value = "Whether is best effort (true, false)")
  public Boolean getBesteffort() {
    return besteffort;
  }

  public void setBesteffort(Boolean besteffort) {
    this.besteffort = besteffort;
  }

  public MplsTePolicy bandwidth(Long bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

  /**
   * Tunnel bandwidth in kbps
   *
   * @return bandwidth
   */
  @ApiModelProperty(example = "null", value = "Tunnel bandwidth in kbps")
  public Long getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(Long bandwidth) {
    this.bandwidth = bandwidth;
  }

  public MplsTePolicy coRoute(Boolean coRoute) {
    this.coRoute = coRoute;
    return this;
  }

  /**
   * Whether to re Route (true, false)
   *
   * @return coRoute
   */
  @ApiModelProperty(example = "null", value = "Whether to re Route (true, false)")
  public Boolean getCoRoute() {
    return coRoute;
  }

  public void setCoRoute(Boolean coRoute) {
    this.coRoute = coRoute;
  }

  public MplsTePolicy bfdEnable(Boolean bfdEnable) {
    this.bfdEnable = bfdEnable;
    return this;
  }

  /**
   * Whether to enable BFD Protocol (true, false)
   *
   * @return bfdEnable
   */
  @ApiModelProperty(example = "null", value = "Whether to enable BFD Protocol (true, false)")
  public Boolean getBfdEnable() {
    return bfdEnable;
  }

  public void setBfdEnable(Boolean bfdEnable) {
    this.bfdEnable = bfdEnable;
  }

  public MplsTePolicy pathConstraint(PathConstraint pathConstraint) {
    this.pathConstraint = pathConstraint;
    return this;
  }

  /**
   * Get pathConstraint
   *
   * @return pathConstraint
   */
  @ApiModelProperty(example = "null", value = "")
  public PathConstraint getPathConstraint() {
    return pathConstraint;
  }

  public void setPathConstraint(PathConstraint pathConstraint) {
    this.pathConstraint = pathConstraint;
  }

  public MplsTePolicy pathProtectPolicy(PathProtectPolicy pathProtectPolicy) {
    this.pathProtectPolicy = pathProtectPolicy;
    return this;
  }

  /**
   * Get pathProtectPolicy
   *
   * @return pathProtectPolicy
   */
  @ApiModelProperty(example = "null", value = "")
  public PathProtectPolicy getPathProtectPolicy() {
    return pathProtectPolicy;
  }

  public void setPathProtectPolicy(PathProtectPolicy pathProtectPolicy) {
    this.pathProtectPolicy = pathProtectPolicy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MplsTePolicy mplsTePolicy = (MplsTePolicy) o;
    return Objects.equals(this.signalType, mplsTePolicy.signalType) &&
           Objects.equals(this.manageProtocol, mplsTePolicy.manageProtocol) &&
           Objects.equals(this.sharing, mplsTePolicy.sharing) &&
           Objects.equals(this.besteffort, mplsTePolicy.besteffort) &&
           Objects.equals(this.bandwidth, mplsTePolicy.bandwidth) &&
           Objects.equals(this.coRoute, mplsTePolicy.coRoute) &&
           Objects.equals(this.bfdEnable, mplsTePolicy.bfdEnable) &&
           Objects.equals(this.pathConstraint, mplsTePolicy.pathConstraint) &&
           Objects.equals(this.pathProtectPolicy, mplsTePolicy.pathProtectPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signalType, manageProtocol, sharing, besteffort, bandwidth, coRoute,
                        bfdEnable, pathConstraint, pathProtectPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MplsTePolicy {\n");

    sb.append("    signalType: ").append(toIndentedString(signalType)).append("\n");
    sb.append("    manageProtocol: ").append(toIndentedString(manageProtocol)).append("\n");
    sb.append("    sharing: ").append(toIndentedString(sharing)).append("\n");
    sb.append("    besteffort: ").append(toIndentedString(besteffort)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    coRoute: ").append(toIndentedString(coRoute)).append("\n");
    sb.append("    bfdEnable: ").append(toIndentedString(bfdEnable)).append("\n");
    sb.append("    pathConstraint: ").append(toIndentedString(pathConstraint)).append("\n");
    sb.append("    pathProtectPolicy: ").append(toIndentedString(pathProtectPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first
   * line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

