/**
 * L3VpnService Sbi Adapter Interface
 * Orchestrator SDN-O SBI Reference V1.0-L3VPN
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package openo.sdno.driver.zte.sptn.models.north;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * DiffServ configuration
 */
@ApiModel(description = "DiffServ configuration")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen",
                            date = "2016-08-12T11:26:39.981+08:00")
public class DiffServ {

  @SerializedName("mode")
  private String mode = null;

  @SerializedName("serviceClass")
  private String serviceClass = null;

  @SerializedName("color")
  private String color = null;

  public DiffServ mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Differential service mode (uniform, outbound, short-pipe)
   *
   * @return mode
   */
  @ApiModelProperty(example = "null",
                    value = "Differential service mode (uniform, outbound, short-pipe)")
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }

  public DiffServ serviceClass(String serviceClass) {
    this.serviceClass = serviceClass;
    return this;
  }

  /**
   * Differential service class (BE, AF1, AF2, AF3, AF4, EF, CS6, CS7)
   *
   * @return serviceClass
   */
  @ApiModelProperty(example = "null",
                    value = "Differential service class (BE, AF1, AF2, AF3, AF4, EF, CS6, CS7)")
  public String getServiceClass() {
    return serviceClass;
  }

  public void setServiceClass(String serviceClass) {
    this.serviceClass = serviceClass;
  }

  public DiffServ color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Differential service color (green, yellow, red)
   *
   * @return color
   */
  @ApiModelProperty(example = "null", value = "Differential service color (green, yellow, red)")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiffServ diffServ = (DiffServ) o;
    return Objects.equals(this.mode, diffServ.mode) &&
           Objects.equals(this.serviceClass, diffServ.serviceClass) &&
           Objects.equals(this.color, diffServ.color);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mode, serviceClass, color);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiffServ {\n");

    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    serviceClass: ").append(toIndentedString(serviceClass)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first
   * line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

